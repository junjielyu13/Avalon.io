version: '3.8'

services:
  #Node Service
  avalon-app:
    container_name: avalon-app
    image: avalon/node
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    #command: npm run start:dev
    tty: true
    working_dir: /usr/src/app
    ports:
      - 3000:3000
      - 9229:9229
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - avalon-network
    environment:
      NODE_ENV: development
      PORT: 3000
    #command: npm run start:dev
    command: npm run nodemon
    restart: unless-stopped

  #MongoDb Service
  avalon-db:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    tty: true
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - dbdata:/usr/data/mongo/
    networks:
      - avalon-network

  #MongoDb express Service
  avalon-mongo-express:
    image: mongo-express
    container_name: avalon-mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    volumes:
      - dbdata:/usr/data/mongoexpress/
    depends_on:
      - mongodb
    networks:
      - avalon-network
    ports:
      - 8081:8081
    healthcheck:
      test: wget --quiet --tries=3 --spider http://admin:admin123@localhost:8081 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    tty: true
    restart: unless-stopped

  #Redis Service

  #Nginx Service
  avalon-webserver:
    build:
      context: .
      dockerfile: Dockerfile-nginx
    container_name: avalon-nginx
    depends_on:
      - avalon-app
    restart: unless-stopped
    tty: true
    environment:
      - NGINX_SERVER_NAME=localhost
      - NEST_HOST=localhost
      - NEST_PORT=3000
      - NGINX_MAX_BODY=100M
    expose:
      - 80
    ports:
      - 80:80
    volumes:
      - ./:/usr/src/app
    networks:
      - avalon-network

#Docker Networks
networks:
  avalon-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
